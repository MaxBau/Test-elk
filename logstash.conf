input {
  file {
	'start_position' => 'beginning'
    'exclude' => ['*.gz', 'scheduler_errors.log']
    'path' => ['/mnt/lra-production/log/errors/*.log']
    'type' => 'log applicatif paris und'
	'codec' => plain {
                        charset => ["ISO-8859-1"]
                }
  }
  file {
	'start_position' => 'beginning'
    'exclude' => ['*.gz', 'und_errors.log']
    'path' => ['/mnt/lra-production/log/errors/*.log']
    'type' => 'log applicatif paris scheduler'
	'codec' => plain {
                        charset => ["ISO-8859-1"]
                }
  }
  file {
	'start_position' => 'beginning'
    'exclude' => ['*.gz', 'scheduler_errors.log']
    'path' => ['/mnt/wp-nsirml/log/errors/*.log']
    'type' => 'log applicatif rml und'
	'codec' => plain {
                        charset => ["ISO-8859-1"]
                }
  }
  file {
	'start_position' => 'beginning'
    'exclude' => ['*.gz', 'und_errors.log']
    'path' => ['/mnt/wp-nsirml/log/errors/*.log']
    'type' => 'log applicatif rml scheduler'
	'codec' => plain {
                        charset => ["ISO-8859-1"]
                }
  }
}

filter{
	if [type] == "log applicatif paris und" {		
		multiline {
			pattern => "^\d\d\d\d"
			negate => "true"
			what => "previous"
		}
		if [message] !~ /(^\d\d\d\d-\d\d-\d\d)/ {
			drop{}
		}
		grok {
			add_field => { "web_app" => "UND_PARIS" }
			match => [ "message", "%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:LEVEL} \[%{NOTSPACE:class}\] (?<errorMessage>((.|\n)* \|))(?<user>([a-zA-Z0-9._-]*))\|(?<sessionID>(([0-9A-Z])*)).(?<instance>(([0-9a-z])*))(?<stack>((.|\n)*))" ]
		}
		date {
			match => [ "logdate", "yyyy-MM-dd HH:mm:ss,SSS" ]
		}
	}
	if [type] == "log applicatif paris scheduler" {		
		multiline {
			pattern => "^\d\d\d\d"
			negate => "true"
			what => "previous"
		}
		if [message] !~ /(^\d\d\d\d-\d\d-\d\d)/ {
			drop{}
		}
		grok {
			add_field => { "web_app" => "SCHEDULER_PARIS" }
			match => [ "message", "%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:LEVEL} \[%{NOTSPACE:class}\] (?<errorMessage>((.|\n)* \|))(?<user>([a-zA-Z0-9._-]*))\|(?<sessionID>(([0-9A-Z])*)).(?<instance>(([0-9a-z])*))(?<stack>((.|\n)*))" ]
		}
		date {
			match => [ "logdate", "yyyy-MM-dd HH:mm:ss,SSS" ]
		}
	}
	if [type] == "log applicatif rml und" {		
		multiline {
			pattern => "^\d\d\d\d"
			negate => "true"
			what => "previous"
		}
		if [message] !~ /(^\d\d\d\d-\d\d-\d\d)/ {
			drop{}
		}
		grok {
			add_field => { "web_app" => "UND_RML" }
			match => [ "message", "%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:LEVEL} \[%{NOTSPACE:class}\] (?<errorMessage>((.|\n)* \|))(?<user>([a-zA-Z0-9._-]*))\|(?<sessionID>(([0-9A-Z])*)).(?<instance>(([0-9a-z])*))(?<stack>((.|\n)*))" ]
		}
		date {
			match => [ "logdate", "yyyy-MM-dd HH:mm:ss,SSS" ]
		}
	}
	if [type] == "log applicatif rml scheduler" {		
		multiline {
			pattern => "^\d\d\d\d"
			negate => "true"
			what => "previous"
		}
		if [message] !~ /(^\d\d\d\d-\d\d-\d\d)/ {
			drop{}
		}
		grok {
			add_field => { "web_app" => "SCHEDULER_RML" }
			match => [ "message", "%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:LEVEL} \[%{NOTSPACE:class}\] (?<errorMessage>((.|\n)* \|))(?<user>([a-zA-Z0-9._-]*))\|(?<sessionID>(([0-9A-Z])*)).(?<instance>(([0-9a-z])*))(?<stack>((.|\n)*))" ]
		}
		date {
			match => [ "logdate", "yyyy-MM-dd HH:mm:ss,SSS" ]
		}
	}
}

output {
  elasticsearch {
	document_id => "%{[logdate]}%{[class]}"
    host => "localhost"
  }
}